name: test_release
run-name: Build ${{ github.event.inputs.build_folder }}
on:
  workflow_dispatch:
    inputs:
      build_folder:
        description: "From which folder's environment.yml, the conda environment will be built"
        type: string   
        required: false
        default: 'win_llamacppgpu'
      cuda:
        description: "cuda version"
        type: string   
        required: false
        default: '12.6.0'

permissions:
  contents: write
        
jobs:
  create_env:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine tag name
      id: tag
      shell: bash
      run: |
        BUILD_NUMBER="$(git rev-list --count HEAD)"
        SHORT_HASH="$(git rev-parse --short=7 HEAD)"
        if [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
        echo "name=${{ github.event.inputs.cuda }}-b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        else
        SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
        echo "name=${{ github.event.inputs.build_folder }}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.name }}
        release_name: ${{ steps.tag.outputs.name }}
        draft: false
        prerelease: false

    - name: Upload release
      id: upload_release
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
            echo 'release_id: ${{ steps.create_release.outputs.id }}'
            echo 'release_url: ${{ steps.create_release.outputs.html_url }}'
            const descriptionFilePath = '${{ github.event.inputs.build_folder }}/README.MD';
            let releaseDescription = '';
            if (fs.existsSync(descriptionFilePath)) {
                releaseDescription = fs.readFileSync(descriptionFilePath, 'utf8');
                console.log("Successfully read release description from 'release_description.txt'");
            } else {
                console.warn("Release description file 'release_description.txt' not found. Proceeding without a description.");
            }
            releaseDescription += `\n\n[View the latest README.MD file](${fileUrl})`;

            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            await github.repos.updateRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    body: releaseDescription
                });

            for (let file of await fs.readdirSync('${{ github.event.inputs.build_folder }}')) {
                if (path.extname(file) === '.yml') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: file,
                    data: await fs.readFileSync('${{ github.event.inputs.build_folder }}/${file}`)
                });
                }
            }
