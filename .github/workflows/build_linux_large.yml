name: build_linux_large
# this create a env inside docker which has the envs volumn mapped, so that can be zipped outside and uploaded as artifacts.
run-name: B&DL ${{ github.event.inputs.build_folder }}
on:
  workflow_dispatch:
    inputs:
      build_folder:
        description: 'From which folder, the Dockerfiles will be built'  
        type: string   
        required: false
        default: 'vlinux_llama2_dockbuild'
      ENVS_DIR:
          description: 'the envs directory on VINCI machine'  
          type: string   
          required: false
          default: '/home/vhaslcshij/workspace'
      ENV_NAME:
          description: 'the env name to be used, also will be the folder name under ENVS_DIR'
          type: string   
          required: false
          default: 'vlinux_llama2'
      USER_NAME:
          description: 'the username on VINCI machine'  
          type: string   
          required: false
          default: 'vhaslcshij'
      USER_ID:
          description: 'the userid on VINCI machine. Can be found using: id -u'  
          type: string   
          required: false
          default: '1005'
      retention_days:
        description: 'Days to keep the artifacts'
        type: int
        required: false
        default: 7


jobs:
  build_docker:
    runs-on: ubuntu-latest
    steps:
      - name: Backup docker files
        run: |
          echo "backup moby/buildkit image"
          sudo docker image save -o ${GITHUB_WORKSPACE}/images.tar moby/buildkit
          sudo docker system prune -a -f
          echo "Back up /var/lib/docker folder structure and other files"
          sudo rsync -aPq /var/lib/docker/ ${GITHUB_WORKSPACE}/docker 


      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'          
          remove-dotnet: 'true'
          # instead of using default value to mount to build path, /var/lib/docker/ is really the place we need more spaces.
          build-mount-path: '/var/lib/docker/'

      - name: Restore docker files
        run: |
          sudo rsync -aPq ${GITHUB_WORKSPACE}/docker/ /var/lib/docker
          sudo rm -rf ${GITHUB_WORKSPACE}/docker
          sudo ls ${GITHUB_WORKSPACE} -l
          sudo docker image load -i ${GITHUB_WORKSPACE}/images.tar
          sudo rm ${GITHUB_WORKSPACE}/images.tar
      
      
      - name: Check docker status
        continue-on-error: true
        run: |
          sudo systemctl status docker.service
          
      - name: Check docker info
        continue-on-error: true
        run: |
          sudo docker info

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Build image
        continue-on-error: false
        run: |
          pwd
          ls
          cd ${{ github.event.inputs.build_folder }}
          docker build -t example-image --build-arg ENVS_DIR=${{ github.event.inputs.ENVS_DIR }} --build-arg ENV_NAME=${{ github.event.inputs.ENV_NAME }} --build-arg USER_NAME=${{ github.event.inputs.USER_NAME }} --build-arg USER_ID=${{ github.event.inputs.USER_ID }} .
          
          
      - name: list images
        run: docker images

      - name: start container
        run: |
          docker run -d --name example-container example-image

      - name: Copy zipped files
        run: |
          pwd
          docker cp example-container:/tmp/*.7z.* .
          ls

      - name: Upload compressed parts as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: upload env ${{ github.event.inputs.build_folder }}
          path: ./*.7z.*
          retention-days: ${{ github.event.inputs.retention_days }}   
