name: test_docker_run
run-name: Test ${{ github.event.inputs.image_name }} & execute ${{ github.event.inputs.cmd }}  

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Image name to run'  
        type: string   
        required: false
        default: 'jupyter/pyspark-notebook'
      cmd:
          description: 'command to run after docker run, e.g. echo "ok"'  
          type: string   
          required: false
          default: ''

jobs:
  run_docker:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Backup docker files
        run: |
          echo "backup moby/buildkit image"
          sudo docker image save -o ${GITHUB_WORKSPACE}/images.tar moby/buildkit
          sudo docker system prune -a -f
          echo "Back up /var/lib/docker folder structure and other files"
          sudo rsync -aPq /var/lib/docker/ ${GITHUB_WORKSPACE}/docker 


      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'          
          remove-dotnet: 'true'
          # instead of using default value to mount to build path, /var/lib/docker/ is really the place we need more spaces.
          build-mount-path: '/var/lib/docker/'

      - name: Restore docker files
        run: |
          sudo rsync -aPq ${GITHUB_WORKSPACE}/docker/ /var/lib/docker
          sudo rm -rf ${GITHUB_WORKSPACE}/docker
          sudo ls ${GITHUB_WORKSPACE} -l
          sudo docker image load -i ${GITHUB_WORKSPACE}/images.tar
          sudo rm ${GITHUB_WORKSPACE}/images.tar

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-${{ github.event.inputs.image_name }}
          restore-keys: |
            ${{ runner.os }}-${{ github.event.inputs.image_name }}

      - name: Set up Docker env
        uses: docker/setup-buildx-action@v2.5.0

      - name: Run with ${{ github.event.inputs.cmd }}
        if: github.event.inputs.cmd != ''
        run:
          docker run --entrypoint=/bin/bash ${{ github.event.inputs.image_name }} ${{ github.event.inputs.cmd }}
      
      - name: Test run
        if: github.event.inputs.cmd == ''
        run:
          docker run ${{ github.event.inputs.image_name }}